type EcPoint = EcPoint [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<EcPoint> = NonZero<EcPoint> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc ec_point_is_zero = ec_point_is_zero;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc ec_point_unwrap = ec_point_unwrap;
libfunc drop<felt252> = drop<felt252>;

F0:
ec_point_is_zero([0]) { fallthrough() F0_B0([1]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 1>>() -> ([2]);
store_temp<felt252>([2]) -> ([2]);
return([2]);
F0_B0:
branch_align() -> ();
ec_point_unwrap([1]) -> ([3], [4]);
drop<felt252>([4]) -> ();
store_temp<felt252>([3]) -> ([3]);
return([3]);

test::foo@F0([0]: EcPoint) -> (felt252);