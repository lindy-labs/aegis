type EcOp = EcOp [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type EcPoint = EcPoint [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<EcPoint> = NonZero<EcPoint> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type EcState = EcState [storable: true, drop: true, dup: true, zero_sized: false];

libfunc ec_state_add_mul = ec_state_add_mul;
libfunc store_temp<EcOp> = store_temp<EcOp>;
libfunc store_temp<EcState> = store_temp<EcState>;

F0:
ec_state_add_mul([0], [1], [2], [3]) -> ([4], [5]);
store_temp<EcOp>([4]) -> ([4]);
store_temp<EcState>([5]) -> ([5]);
return([4], [5]);

test::foo@F0([0]: EcOp, [1]: EcState, [2]: felt252, [3]: NonZero<EcPoint>) -> (EcOp, EcState);