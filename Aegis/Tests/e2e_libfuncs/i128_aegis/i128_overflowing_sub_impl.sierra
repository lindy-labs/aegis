type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type i128 = i128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::SignedIntegerResult::<core::integer::i128> = Enum<ut@core::integer::SignedIntegerResult::<core::integer::i128>, i128, i128, i128> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i128_overflowing_sub_impl = i128_overflowing_sub_impl;
libfunc branch_align = branch_align;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i128>, 0> = enum_init<core::integer::SignedIntegerResult::<core::integer::i128>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::integer::SignedIntegerResult::<core::integer::i128>> = store_temp<core::integer::SignedIntegerResult::<core::integer::i128>>;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i128>, 1> = enum_init<core::integer::SignedIntegerResult::<core::integer::i128>, 1>;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i128>, 2> = enum_init<core::integer::SignedIntegerResult::<core::integer::i128>, 2>;

i128_overflowing_sub_impl([0], [1], [2]) { fallthrough([3], [4]) 6([5], [6]) 11([7], [8]) }; // 0
branch_align() -> (); // 1
enum_init<core::integer::SignedIntegerResult::<core::integer::i128>, 0>([4]) -> ([9]); // 2
store_temp<RangeCheck>([3]) -> ([3]); // 3
store_temp<core::integer::SignedIntegerResult::<core::integer::i128>>([9]) -> ([9]); // 4
return([3], [9]); // 5
branch_align() -> (); // 6
enum_init<core::integer::SignedIntegerResult::<core::integer::i128>, 1>([6]) -> ([10]); // 7
store_temp<RangeCheck>([5]) -> ([5]); // 8
store_temp<core::integer::SignedIntegerResult::<core::integer::i128>>([10]) -> ([10]); // 9
return([5], [10]); // 10
branch_align() -> (); // 11
enum_init<core::integer::SignedIntegerResult::<core::integer::i128>, 2>([8]) -> ([11]); // 12
store_temp<RangeCheck>([7]) -> ([7]); // 13
store_temp<core::integer::SignedIntegerResult::<core::integer::i128>>([11]) -> ([11]); // 14
return([7], [11]); // 15

test::foo@0([0]: RangeCheck, [1]: i128, [2]: i128) -> (RangeCheck, core::integer::SignedIntegerResult::<core::integer::i128>);