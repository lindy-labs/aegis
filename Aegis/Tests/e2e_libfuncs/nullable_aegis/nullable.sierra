type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Nullable<Unit> = Nullable<Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<Unit> = Box<Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc into_box<Unit> = into_box<Unit>;
libfunc nullable_from_box<Unit> = nullable_from_box<Unit>;
libfunc match_nullable<Unit> = match_nullable<Unit>;
libfunc branch_align = branch_align;
libfunc felt252_const<0> = felt252_const<0>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc drop<Box<Unit>> = drop<Box<Unit>>;
libfunc felt252_const<1> = felt252_const<1>;

struct_construct<Unit>() -> ([0]); // 0
into_box<Unit>([0]) -> ([1]); // 1
nullable_from_box<Unit>([1]) -> ([2]); // 2
match_nullable<Unit>([2]) { fallthrough() 8([3]) }; // 3
branch_align() -> (); // 4
felt252_const<0>() -> ([4]); // 5
store_temp<felt252>([4]) -> ([4]); // 6
return([4]); // 7
branch_align() -> (); // 8
drop<Box<Unit>>([3]) -> (); // 9
felt252_const<1>() -> ([5]); // 10
store_temp<felt252>([5]) -> ([5]); // 11
return([5]); // 12

test::foo@0() -> (felt252);