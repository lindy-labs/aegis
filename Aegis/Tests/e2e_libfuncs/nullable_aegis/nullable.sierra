type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Const<felt252, 1> = Const<felt252, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 0> = Const<felt252, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Nullable<Unit> = Nullable<Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<Unit> = Box<Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc into_box<Unit> = into_box<Unit>;
libfunc nullable_from_box<Unit> = nullable_from_box<Unit>;
libfunc match_nullable<Unit> = match_nullable<Unit>;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<felt252, 0>> = const_as_immediate<Const<felt252, 0>>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc drop<Box<Unit>> = drop<Box<Unit>>;
libfunc const_as_immediate<Const<felt252, 1>> = const_as_immediate<Const<felt252, 1>>;

F0:
into_box<Unit>([0]) -> ([1]);
nullable_from_box<Unit>([1]) -> ([2]);
match_nullable<Unit>([2]) { fallthrough() F0_B0([3]) };
branch_align() -> ();
const_as_immediate<Const<felt252, 0>>() -> ([4]);
store_temp<felt252>([4]) -> ([4]);
return([4]);
F0_B0:
branch_align() -> ();
drop<Box<Unit>>([3]) -> ();
const_as_immediate<Const<felt252, 1>>() -> ([5]);
store_temp<felt252>([5]) -> ([5]);
return([5]);

test::foo@F0([0]: Unit) -> (felt252);