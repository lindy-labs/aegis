type Nullable<felt252> = Nullable<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc match_nullable<felt252> = match_nullable<felt252>;
libfunc branch_align = branch_align;
libfunc store_temp<Box<felt252>> = store_temp<Box<felt252>>;
libfunc drop<Box<felt252>> = drop<Box<felt252>>;

match_nullable<felt252>([0]) { fallthrough() 4([2]) }; // 0
branch_align() -> (); // 1
store_temp<Box<felt252>>([1]) -> ([1]); // 2
return([1]); // 3
branch_align() -> (); // 4
drop<Box<felt252>>([1]) -> (); // 5
store_temp<Box<felt252>>([2]) -> ([2]); // 6
return([2]); // 7

test::foo@0([0]: Nullable<felt252>, [1]: Box<felt252>) -> (Box<felt252>);