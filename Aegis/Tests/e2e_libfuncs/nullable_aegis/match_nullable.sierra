type Nullable<felt252> = Nullable<felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Box<felt252> = Box<felt252> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc match_nullable<felt252> = match_nullable<felt252>;
libfunc branch_align = branch_align;
libfunc store_temp<Box<felt252>> = store_temp<Box<felt252>>;
libfunc drop<Box<felt252>> = drop<Box<felt252>>;

F0:
match_nullable<felt252>([0]) { fallthrough() F0_B0([2]) };
branch_align() -> ();
store_temp<Box<felt252>>([1]) -> ([1]);
return([1]);
F0_B0:
branch_align() -> ();
drop<Box<felt252>>([1]) -> ();
store_temp<Box<felt252>>([2]) -> ([2]);
return([2]);

test::foo@F0([0]: Nullable<felt252>, [1]: Box<felt252>) -> (Box<felt252>);