type u8 = u8 [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u8, 123> = Const<u8, 123> [storable: false, drop: false, dup: false, zero_sized: false];
type NonZero<u8> = NonZero<u8> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u8_is_zero = u8_is_zero;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<u8, 123>> = const_as_immediate<Const<u8, 123>>;
libfunc store_temp<u8> = store_temp<u8>;
libfunc unwrap_non_zero<u8> = unwrap_non_zero<u8>;

F0:
u8_is_zero([0]) { fallthrough() F0_B0([1]) };
branch_align() -> ();
const_as_immediate<Const<u8, 123>>() -> ([2]);
store_temp<u8>([2]) -> ([2]);
return([2]);
F0_B0:
branch_align() -> ();
unwrap_non_zero<u8>([1]) -> ([3]);
store_temp<u8>([3]) -> ([3]);
return([3]);

test::foo@F0([0]: u8) -> (u8);