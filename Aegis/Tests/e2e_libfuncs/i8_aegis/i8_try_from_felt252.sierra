type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type i8 = i8 [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<core::integer::i8> = Enum<ut@core::option::Option::<core::integer::i8>, i8, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i8_try_from_felt252 = i8_try_from_felt252;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<core::integer::i8>, 0> = enum_init<core::option::Option::<core::integer::i8>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::option::Option::<core::integer::i8>> = store_temp<core::option::Option::<core::integer::i8>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::integer::i8>, 1> = enum_init<core::option::Option::<core::integer::i8>, 1>;

F0:
i8_try_from_felt252([0], [1]) { fallthrough([2], [3]) F0_B0([4]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::i8>, 0>([3]) -> ([5]);
store_temp<RangeCheck>([2]) -> ([2]);
store_temp<core::option::Option::<core::integer::i8>>([5]) -> ([5]);
return([2], [5]);
F0_B0:
branch_align() -> ();
struct_construct<Unit>() -> ([6]);
enum_init<core::option::Option::<core::integer::i8>, 1>([6]) -> ([7]);
store_temp<RangeCheck>([4]) -> ([4]);
store_temp<core::option::Option::<core::integer::i8>>([7]) -> ([7]);
return([4], [7]);

test::foo@F0([0]: RangeCheck, [1]: felt252) -> (RangeCheck, core::option::Option::<core::integer::i8>);