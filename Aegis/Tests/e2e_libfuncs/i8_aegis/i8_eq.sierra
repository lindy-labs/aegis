type i8 = i8 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i8_const<11> = i8_const<11>;
libfunc i8_const<12> = i8_const<12>;
libfunc store_temp<i8> = store_temp<i8>;
libfunc i8_eq = i8_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

i8_const<11>() -> ([0]); // 0
i8_const<12>() -> ([1]); // 1
store_temp<i8>([0]) -> ([0]); // 2
i8_eq([0], [1]) { fallthrough() 9() }; // 3
branch_align() -> (); // 4
struct_construct<Unit>() -> ([2]); // 5
enum_init<core::bool, 0>([2]) -> ([3]); // 6
store_temp<core::bool>([3]) -> ([3]); // 7
return([3]); // 8
branch_align() -> (); // 9
struct_construct<Unit>() -> ([4]); // 10
enum_init<core::bool, 1>([4]) -> ([5]); // 11
store_temp<core::bool>([5]) -> ([5]); // 12
return([5]); // 13

test::foo@0() -> (core::bool);