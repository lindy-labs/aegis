type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_append<felt252> = array_append<felt252>;
libfunc store_temp<Array<felt252>> = store_temp<Array<felt252>>;

F0:
array_append<felt252>([0], [1]) -> ([3]);
array_append<felt252>([3], [2]) -> ([4]);
store_temp<Array<felt252>>([4]) -> ([4]);
return([4]);

test::foo@F0([0]: Array<felt252>, [1]: felt252, [2]: felt252) -> (Array<felt252>);