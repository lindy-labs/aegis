type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type Box<Tuple<felt252, felt252>> = Box<Tuple<felt252, felt252>> [storable: true, drop: true, dup: true, zero_sized: false];
type core::option::Option::<@core::box::Box::<[core::felt252; 2]>> = Enum<ut@core::option::Option::<@core::box::Box::<[core::felt252; 2]>>, Box<Tuple<felt252, felt252>>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<felt252, felt252> = Struct<ut@Tuple, felt252, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Snapshot<Array<felt252>> = Snapshot<Array<felt252>> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc array_snapshot_multi_pop_front<Tuple<felt252, felt252>> = array_snapshot_multi_pop_front<Tuple<felt252, felt252>>;
libfunc branch_align = branch_align;
libfunc enum_init<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>, 0> = enum_init<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<Snapshot<Array<felt252>>> = store_temp<Snapshot<Array<felt252>>>;
libfunc store_temp<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>> = store_temp<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>, 1> = enum_init<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>, 1>;

F0:
array_snapshot_multi_pop_front<Tuple<felt252, felt252>>([0], [1]) { fallthrough([2], [3], [4]) F0_B0([5], [6]) };
branch_align() -> ();
enum_init<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([2]) -> ([2]);
store_temp<Snapshot<Array<felt252>>>([3]) -> ([3]);
store_temp<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>>([7]) -> ([7]);
return([2], [3], [7]);
F0_B0:
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>, 1>([8]) -> ([9]);
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<Snapshot<Array<felt252>>>([6]) -> ([6]);
store_temp<core::option::Option::<@core::box::Box::<[core::felt252; 2]>>>([9]) -> ([9]);
return([5], [6], [9]);

test::foo@F0([0]: RangeCheck, [1]: Snapshot<Array<felt252>>) -> (RangeCheck, Snapshot<Array<felt252>>, core::option::Option::<@core::box::Box::<[core::felt252; 2]>>);