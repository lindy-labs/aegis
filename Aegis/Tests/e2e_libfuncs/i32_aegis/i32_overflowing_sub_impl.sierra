type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type i32 = i32 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::SignedIntegerResult::<core::integer::i32> = Enum<ut@core::integer::SignedIntegerResult::<core::integer::i32>, i32, i32, i32> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i32_overflowing_sub_impl = i32_overflowing_sub_impl;
libfunc branch_align = branch_align;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i32>, 0> = enum_init<core::integer::SignedIntegerResult::<core::integer::i32>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::integer::SignedIntegerResult::<core::integer::i32>> = store_temp<core::integer::SignedIntegerResult::<core::integer::i32>>;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i32>, 1> = enum_init<core::integer::SignedIntegerResult::<core::integer::i32>, 1>;
libfunc enum_init<core::integer::SignedIntegerResult::<core::integer::i32>, 2> = enum_init<core::integer::SignedIntegerResult::<core::integer::i32>, 2>;

F0:
i32_overflowing_sub_impl([0], [1], [2]) { fallthrough([3], [4]) F0_B0([5], [6]) F0_B1([7], [8]) };
branch_align() -> ();
enum_init<core::integer::SignedIntegerResult::<core::integer::i32>, 0>([4]) -> ([9]);
store_temp<RangeCheck>([3]) -> ([3]);
store_temp<core::integer::SignedIntegerResult::<core::integer::i32>>([9]) -> ([9]);
return([3], [9]);
F0_B0:
branch_align() -> ();
enum_init<core::integer::SignedIntegerResult::<core::integer::i32>, 1>([6]) -> ([10]);
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<core::integer::SignedIntegerResult::<core::integer::i32>>([10]) -> ([10]);
return([5], [10]);
F0_B1:
branch_align() -> ();
enum_init<core::integer::SignedIntegerResult::<core::integer::i32>, 2>([8]) -> ([11]);
store_temp<RangeCheck>([7]) -> ([7]);
store_temp<core::integer::SignedIntegerResult::<core::integer::i32>>([11]) -> ([11]);
return([7], [11]);

test::foo@F0([0]: RangeCheck, [1]: i32, [2]: i32) -> (RangeCheck, core::integer::SignedIntegerResult::<core::integer::i32>);