type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u64, 12> = Const<u64, 12> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u64, 11> = Const<u64, 11> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<u64, 11>> = const_as_immediate<Const<u64, 11>>;
libfunc const_as_immediate<Const<u64, 12>> = const_as_immediate<Const<u64, 12>>;
libfunc store_temp<u64> = store_temp<u64>;
libfunc u64_eq = u64_eq;
libfunc branch_align = branch_align;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

F0:
const_as_immediate<Const<u64, 11>>() -> ([0]);
const_as_immediate<Const<u64, 12>>() -> ([1]);
store_temp<u64>([0]) -> ([0]);
u64_eq([0], [1]) { fallthrough() F0_B0() };
branch_align() -> ();
struct_construct<Unit>() -> ([2]);
enum_init<core::bool, 0>([2]) -> ([3]);
store_temp<core::bool>([3]) -> ([3]);
return([3]);
F0_B0:
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 1>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([5]);
return([5]);

test::foo@F0() -> (core::bool);