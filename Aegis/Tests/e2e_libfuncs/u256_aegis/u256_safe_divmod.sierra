type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<core::integer::u256, core::integer::u256> = Struct<ut@Tuple, core::integer::u256, core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type U128MulGuarantee = U128MulGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u256_safe_divmod = u256_safe_divmod;
libfunc u128_mul_guarantee_verify = u128_mul_guarantee_verify;
libfunc struct_construct<Tuple<core::integer::u256, core::integer::u256>> = struct_construct<Tuple<core::integer::u256, core::integer::u256>>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<Tuple<core::integer::u256, core::integer::u256>> = store_temp<Tuple<core::integer::u256, core::integer::u256>>;

F0:
u256_safe_divmod([0], [1], [2]) -> ([3], [4], [5], [6]);
u128_mul_guarantee_verify([3], [6]) -> ([7]);
struct_construct<Tuple<core::integer::u256, core::integer::u256>>([4], [5]) -> ([8]);
store_temp<RangeCheck>([7]) -> ([7]);
store_temp<Tuple<core::integer::u256, core::integer::u256>>([8]) -> ([8]);
return([7], [8]);

test::foo@F0([0]: RangeCheck, [1]: core::integer::u256, [2]: NonZero<core::integer::u256>) -> (RangeCheck, Tuple<core::integer::u256, core::integer::u256>);