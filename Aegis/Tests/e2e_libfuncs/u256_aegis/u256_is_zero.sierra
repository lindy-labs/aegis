type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<u128, 0> = Const<u128, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];

libfunc u256_is_zero = u256_is_zero;
libfunc branch_align = branch_align;
libfunc const_as_immediate<Const<u128, 0>> = const_as_immediate<Const<u128, 0>>;
libfunc struct_construct<core::integer::u256> = struct_construct<core::integer::u256>;
libfunc store_temp<core::integer::u256> = store_temp<core::integer::u256>;
libfunc unwrap_non_zero<core::integer::u256> = unwrap_non_zero<core::integer::u256>;

F0:
u256_is_zero([0]) { fallthrough() F0_B0([1]) };
branch_align() -> ();
const_as_immediate<Const<u128, 0>>() -> ([2]);
const_as_immediate<Const<u128, 0>>() -> ([3]);
struct_construct<core::integer::u256>([2], [3]) -> ([4]);
store_temp<core::integer::u256>([4]) -> ([4]);
return([4]);
F0_B0:
branch_align() -> ();
unwrap_non_zero<core::integer::u256>([1]) -> ([5]);
store_temp<core::integer::u256>([5]) -> ([5]);
return([5]);

test::foo@F0([0]: core::integer::u256) -> (core::integer::u256);