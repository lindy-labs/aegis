type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type u64 = u64 [storable: true, drop: true, dup: true, zero_sized: false];
type core::result::Result::<core::integer::u64, core::integer::u64> = Enum<ut@core::result::Result::<core::integer::u64, core::integer::u64>, u64, u64> [storable: true, drop: true, dup: true, zero_sized: false];
type i64 = i64 [storable: true, drop: true, dup: true, zero_sized: false];

libfunc i64_diff = i64_diff;
libfunc branch_align = branch_align;
libfunc enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0> = enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::result::Result::<core::integer::u64, core::integer::u64>> = store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>;
libfunc enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1> = enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1>;

F0:
i64_diff([0], [1], [2]) { fallthrough([3], [4]) F0_B0([5], [6]) };
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([3]);
store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>([7]) -> ([7]);
return([3], [7]);
F0_B0:
branch_align() -> ();
enum_init<core::result::Result::<core::integer::u64, core::integer::u64>, 1>([6]) -> ([8]);
store_temp<RangeCheck>([5]) -> ([5]);
store_temp<core::result::Result::<core::integer::u64, core::integer::u64>>([8]) -> ([8]);
return([5], [8]);

test::foo@F0([0]: RangeCheck, [1]: i64, [2]: i64) -> (RangeCheck, core::result::Result::<core::integer::u64, core::integer::u64>);